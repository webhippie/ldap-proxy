// Code generated by fileb0x at "2017-10-27 12:16:31.211202964 +0200 CEST m=+0.001914372" from config file "ab0x.yaml" DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"io"
	"log"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileLoginTmpl is "login.tmpl"
var FileLoginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x3d\x6f\xe3\x38\x10\xad\xe5\x5f\xc1\x63\x1d\x46\x08\xd2\x5c\x41\x1a\x38\xe4\x52\xa4\xba\xe0\x2e\x01\x6e\x4b\x9a\x1c\x59\x5c\x53\x1c\x2d\x39\x72\xe2\x0d\xfc\xdf\x17\x12\x25\x59\x76\x82\x34\xbb\xc0\x56\x9c\x2f\xbe\x79\x7a\x43\x8f\xe5\x1f\x7f\xff\x73\xf7\xf4\xe5\xf1\x9e\xd5\xd4\xf8\xf5\x6a\x25\xfb\x93\x79\x1d\xb6\x8a\x43\xe0\xeb\x55\x21\x6b\xd0\x76\xbd\x2a\x0a\xd9\x00\x69\x66\x6a\x1d\x13\x90\xe2\x1d\x55\xe2\x4f\xbe\x48\x60\x20\x08\xa4\xf8\x8b\xb3\x54\x2b\x0b\x7b\x67\x40\x0c\xce\x15\x73\xc1\x91\xd3\x5e\x24\xa3\x3d\xa8\x9b\x2b\x96\xea\xe8\xc2\x4e\x10\x8a\xca\x91\x0a\xc8\x59\xd0\x0d\x28\xbe\x77\xf0\xd2\x62\xa4\x8f\x80\x1f\xee\x15\xd8\x2d\x70\x56\x13\xb5\x02\xbe\x75\x6e\xaf\xf8\xff\xe2\xf9\x2f\x71\x87\x4d\xab\xc9\x6d\x3c\xf0\xf5\xea\xfd\xc5\x09\xdc\x42\x32\xd1\xb5\xe4\x30\x7c\x84\x3f\x95\xe9\x8e\x6a\x8c\x23\x12\x39\xf2\xb0\x7e\x7b\x63\xd7\x4f\xbd\xc5\x8e\x47\x59\xe6\xd8\x90\xf6\x2e\xec\x58\x04\xaf\xb8\x33\x18\x38\xab\x23\x54\x8a\xf7\xe5\xff\x22\x12\x3b\x1e\x4b\x9d\x12\x50\x2a\x2b\xbd\xef\x2b\xae\x9d\xc1\xdc\xfb\x74\x33\xd1\xc1\x43\xaa\x01\xe8\x93\xfb\x6d\xc4\xd7\xc3\xb5\x49\x89\xb3\xb2\x9f\x4a\x39\x8e\x45\x6e\xd0\x1e\x06\x40\xeb\xf6\xcc\x78\x9d\x92\xe2\xdd\x4e\x54\x1e\x5e\xd9\x78\x0a\x03\x81\x20\x0e\x7d\x2f\xeb\x8c\x8e\x96\x8d\xa7\xb0\x50\xe9\xce\xd3\xec\xd7\xb8\x87\x38\x7b\x7d\xa7\x8c\x51\xc8\xfa\x76\x81\xd1\x53\x71\x61\x2b\xbc\x0b\x30\x16\x14\x32\xb5\x3a\x8c\x76\xb1\x94\x6f\x4c\x97\xa7\xbc\x2c\xeb\xdb\x41\xcd\x77\xe4\xb4\x87\x48\xc2\xea\xb0\x85\xc8\xd9\x14\x98\x3a\xe8\x77\x95\xc6\x63\x82\xa1\x70\xb0\xd6\xb2\xd4\x23\x70\x21\xdb\x89\xcc\x43\x30\x18\x23\x18\x62\x5d\x82\xd8\x8f\x9c\x61\x64\xad\x4e\xe9\x05\xa3\x9d\xe8\xb5\x13\x37\xeb\xf6\x13\xb9\x0a\x63\xb3\x94\x18\x63\x23\x12\x69\xb3\x03\xcb\x59\x03\x54\xa3\x55\xbc\xc5\x44\x9c\x69\xd3\xbf\xb2\xf3\x49\x7a\xdc\xba\x30\xeb\x73\xfe\xa5\x8d\x8e\x8b\x64\x21\xbd\xde\x80\xbf\xec\x35\x04\x39\xab\x30\x2a\x3e\x71\x9f\xaf\x14\xcf\x63\x64\x82\x28\x87\xf2\x19\xf1\xe2\x79\xf4\x78\xfd\xcb\x8f\xe8\xd3\x09\x43\xba\xd0\x76\xb4\xa8\x1b\x7c\xce\x9c\x5d\x74\x64\x74\x68\x61\xe1\x4f\x97\x0b\xdd\x11\x56\x68\xba\x34\xfc\x86\xb2\x79\x9e\x35\xba\x75\xa4\xbd\xfb\x0e\x8a\x63\x55\x5d\x24\xf3\x58\x72\x66\xe6\x9d\x07\x50\x5c\x0e\xe3\xa7\x05\x9c\x06\x7e\xfa\xf8\xc7\xb3\x27\xf0\x6b\x05\xcc\x92\xcd\x3d\x07\x41\x67\xef\x37\x49\xb4\xe9\x88\x30\x2c\x0a\xc6\xc0\x6c\x89\x36\xba\x46\xc7\x43\x1f\x19\x16\xb9\xb8\x11\x37\x6c\x46\x12\xa9\xd1\xde\x8b\x0d\x12\x61\x73\x92\xe0\x3f\xb7\x0d\xcc\x85\x99\x5c\xc6\x3a\xe7\x97\xcd\x5e\xc3\xbc\x93\xa6\xe8\x89\xbe\xcc\xab\x9a\xa5\x68\x3e\xd9\x87\x5f\x13\x5f\xcb\x32\x97\x0e\x5b\x31\x6f\x43\x59\xe6\xbf\xb3\x1f\x01\x00\x00\xff\xff\x1a\x89\x01\x1e\xdf\x06\x00\x00")

func init() {
	if CTX.Err() != nil {
		log.Fatal(CTX.Err())
	}

	var err error

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileLoginTmpl)
	r, err = gzip.NewReader(rb)
	if err != nil {
		log.Fatal(err)
	}

	err = r.Close()
	if err != nil {
		log.Fatal(err)
	}

	f, err = FS.OpenFile(CTX, "login.tmpl", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		log.Fatal(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		log.Fatal(err)
	}

	err = f.Close()
	if err != nil {
		log.Fatal(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
