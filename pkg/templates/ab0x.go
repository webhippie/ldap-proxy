// Code generated by fileb0x at "2017-10-26 21:32:45.3740765 +0200 CEST m=+0.003436665" from config file "ab0x.yaml" DO NOT EDIT.

package templates

import (
	"bytes"
	"compress/gzip"
	"io"
	"log"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileLayoutTmpl is "layout.tmpl"
var FileLayoutTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x31\x6f\xdb\x30\x10\x85\x67\xeb\x57\x5c\x6f\x0e\x4d\x78\xeb\x40\x0a\x28\xd2\x0c\x9d\xda\x21\x05\xda\x91\x21\xcf\xe6\xd5\x34\xa9\x92\x67\xa7\x86\xa0\xff\x5e\x48\x4a\xd0\x02\x31\x32\x49\xc7\x7b\xef\x7d\x20\x1e\xcd\x87\xcf\x5f\xef\x1f\x7f\x7e\x7b\x80\x28\xa7\xd4\x77\x9d\x99\xbf\xe0\x93\x6b\xcd\xe2\xf9\xa8\x22\xf1\x21\x8a\xda\xa9\x1d\x42\x72\xf9\x60\x91\x32\xf6\xdd\xc6\x44\x72\xa1\xef\x36\x1b\x73\x22\x71\xe0\xa3\xab\x8d\xc4\xe2\x59\xf6\xea\x23\xfe\xb7\x28\x59\x28\x8b\xc5\x67\x0e\x12\x6d\xa0\x0b\x7b\x52\xcb\x70\x07\x9c\x59\xd8\x25\xd5\xbc\x4b\x64\x77\x77\xd0\x62\xe5\x7c\x54\x52\xd4\x9e\xc5\xe6\x82\x90\xdd\x89\x2c\x5e\x98\x9e\x87\x52\xe5\x56\xf0\x97\x07\x4b\xe1\x40\x08\x51\x64\x50\xf4\xfb\xcc\x17\x8b\x3f\xd4\xf7\x4f\xea\xbe\x9c\x06\x27\xfc\x94\x08\xfb\xee\xad\xf1\x35\x3c\x50\xf3\x95\x07\xe1\x92\x6f\xe5\xbf\xca\xdc\x59\x62\xa9\x2f\x49\xc2\x92\xa8\x1f\x47\xd8\x3e\xce\x7f\x30\x4d\x46\xaf\x67\xcb\x3a\x71\x3e\x42\xa5\x64\x91\x7d\xc9\x08\xb1\xd2\xde\xa2\x4e\xc1\x0d\x6a\xa8\xe5\xcf\x55\xbb\xd6\x48\x9a\xde\xbb\xcb\xac\xd8\xb2\x2f\x2b\xfb\x9f\xb3\xc9\x35\x51\x8b\x44\xf2\x8e\x7f\x19\xb6\xbe\x35\x04\x3d\xb7\xa2\x5f\x6a\x31\x4f\x25\x5c\x6f\xd7\x38\x63\xc6\x11\xae\x4c\x29\xc0\x34\xcd\xd0\xf5\xfe\xd0\xaa\x7f\x07\xf2\xab\x61\x6f\xf4\x2a\x5d\x50\x33\xa2\xef\x8c\x5e\x5f\xce\xdf\x00\x00\x00\xff\xff\x74\x79\x80\xa4\x4a\x02\x00\x00")

// FileLoginTmpl is "login.tmpl"
var FileLoginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x4d\x8f\xdb\x36\x10\x3d\x3b\xbf\x62\xc0\x02\xed\x25\xb2\xbb\xb9\x14\x48\x65\x03\xe9\x07\x82\x05\x52\x60\x0f\xc9\xb9\xa0\xc5\x91\xc8\x2e\xc5\x61\x87\xa3\x75\xd4\x20\xff\xbd\x20\x29\x3b\x5a\xef\xe6\x50\x14\xed\xc5\x12\x67\xc8\x79\x8f\x8f\xc3\x27\xb7\xc6\x3d\x40\xe7\x75\x4a\x7b\x35\xdd\x37\x16\xdd\x60\xa5\xb9\x69\x6e\x60\xba\x6f\x7a\x8f\x1f\xcf\xcf\xa6\xc3\x20\xc8\x97\xe1\xe8\x8c\xf1\xa8\x0e\x2f\x36\x57\x25\x3a\xcd\x06\x96\x67\x63\xb0\xd7\x93\x97\xcb\xd8\xd2\x43\xad\x51\x46\x47\x32\x73\xae\xb0\x69\xed\xcd\x55\x85\x46\x9c\x78\x54\x60\x9d\x31\x18\xf2\x9c\xcd\xa7\x4f\xb0\x7d\x9f\xa3\xf0\xf9\x73\x5e\xb3\xb3\x37\x87\x17\x2f\x4a\xdc\xf5\x10\x10\xb6\xbf\x32\x13\x83\x52\x75\xc2\x35\x31\xed\x91\xa5\x31\x3a\x0c\xc8\x0a\xce\x81\x52\x7a\xd3\xc6\xfa\x2c\x20\xb5\x4c\xad\xb1\x69\x77\x35\xd5\xee\x8c\x7b\x38\x54\x38\x0c\x26\xa7\x33\x89\x9e\x78\x5c\x61\xe4\x61\x93\x44\x77\xf7\x68\x14\x8c\x28\x96\xcc\x5e\x45\x4a\xa2\x40\x77\xe2\x28\xec\xd5\xce\x1b\x1d\x9b\xc8\xf4\x71\xde\x79\x1a\x5c\x50\x87\x67\xd8\x8e\x9a\x2f\xa9\x4d\xeb\xf5\x11\xfd\x35\x4e\x09\x2a\xe8\x89\xf7\x6a\x4a\xc8\x41\x8f\x8f\x15\xdb\x6c\x3e\x2c\xe1\x65\x2b\x65\xc5\x52\xf2\x31\x5c\x29\xd8\x51\x10\x26\x9f\x16\xd4\x4d\xeb\x42\x9c\x64\x35\xab\x8c\x15\xe4\x8a\x6b\x48\x99\xe3\x7a\x5c\x17\x6f\xa2\xd7\x1d\x5a\xf2\x06\x79\xaf\x3e\x5c\x25\xf5\x24\xd4\x53\x37\xa5\xbd\xba\xbc\xae\x73\x9d\x8e\x4e\xb4\x77\x7f\xe1\x5e\x51\xdf\x3f\x4a\x11\x33\x76\x52\xe3\xcb\x66\xce\x87\x73\x7e\xfb\xf7\x82\x46\x9d\xd2\x89\xd8\x5c\x09\x7a\xb7\x84\xff\x0b\x41\xbf\x40\x56\x41\x2f\xe3\xe7\x04\xbd\xbb\x4a\xfe\x1f\xa2\x1d\x27\x11\x0a\xab\xf4\x12\xb8\xbc\x35\x91\xdd\xa8\x79\xce\x91\x93\x33\x62\xcf\x4e\x52\xeb\x34\x69\xd4\xde\x37\x47\x12\xa1\xf1\xac\xc9\xbb\x7c\x05\x16\x42\xb5\xca\xe3\xfb\xd6\xee\xb2\x94\x85\xdd\x42\x20\xa7\xbf\x70\x88\x94\x5c\xbe\x58\x4b\xd9\x86\xb3\x83\x65\xcc\xa8\x8d\x71\x61\xa8\xa0\x45\x8b\x2c\x78\x97\xaf\x60\xfe\x7d\x0d\x2e\xf4\x74\x8e\x0b\x0d\x83\xc7\xbd\x12\xcd\x03\xca\x6b\xf8\xe6\x92\xac\x67\x51\x91\xd5\x61\xc5\x71\x61\x78\x16\xaf\x28\xe7\xcc\x5e\x95\x95\x65\xd3\x64\xb4\x7f\x6a\x90\x25\xdc\x18\xa7\x3d\x0d\xd5\xfd\x9e\xcb\x5b\xd4\x06\x79\xb1\x06\xfb\xea\x49\xbe\xfa\x63\xd5\xf0\x36\x64\x89\x74\x56\xa1\x4a\x67\x5f\x55\xe5\xce\xc7\xfa\x2c\x42\x71\xdf\xcc\x33\x7b\x72\xef\xe9\xd4\xe4\x46\xa9\x80\x8b\x1d\xb6\x49\x98\xc2\xb0\x9c\xd4\xcf\x14\xe7\xaa\xee\xb7\x1d\xc5\xf9\x47\x78\xf5\xfd\xcd\x0f\xf0\xde\xd2\xa8\x13\xfc\x44\xc8\x03\xf2\x16\xde\x78\x0f\x65\x56\x02\xc6\x84\xfc\x80\x66\x0b\xbf\x69\x83\x70\x72\x62\x21\x4e\x8c\xd0\xa6\xa8\x4b\xdb\xac\x8f\xc3\xa2\x66\xc9\x0a\xe7\xe4\x01\x5c\x80\xb7\xc8\xa3\x0e\xf3\x76\xe9\x8e\x15\x99\xe2\xca\x6b\xa6\xef\xad\x4b\x20\x44\x1e\x5c\x82\x48\x27\x64\x34\x70\x9c\x41\x2c\x42\xab\xc1\x32\xf6\x7b\x65\x45\x62\x7a\xbd\xdb\x0d\x4e\xec\x74\xdc\x76\x34\xee\x4e\x78\xb4\x2e\x46\x87\x2b\x57\x56\x50\xbb\x60\xaf\x7e\x3f\x7a\x1d\xee\xd5\xe1\xdd\x2f\x6f\xee\xe0\x2e\xe7\xda\x9d\x3e\x80\x10\x44\xa6\x07\x67\x10\x34\x24\xf2\xce\x80\x9e\xc4\x62\x10\xd7\x95\x53\xc8\x33\xf0\x01\x79\x86\x13\x1e\x41\xc7\xe8\x97\xc4\x16\x6e\x7b\x98\x69\x82\xde\x05\x03\x3a\xcc\xe0\x52\x9a\xb0\x84\x3a\x1d\x80\x31\x12\x0b\x38\x01\x0a\xff\x98\xf7\xae\xd4\x4a\x4f\xe9\xd3\xc4\x0b\x8e\x70\xfe\x34\x71\xde\xc5\xcb\xfc\xd5\xcc\xb8\x7f\x4c\x49\x60\x20\x01\x0d\x7f\x4e\x98\x0a\xff\xdc\x7d\x50\xbe\xd5\x42\x90\x97\x77\x56\x0b\x30\xd1\xf8\x35\x62\x82\xbc\x75\x6b\x5e\x03\x06\x64\xed\x9f\xb2\x79\x5b\x26\x67\x0a\xdb\x67\x8f\xf2\xf6\x8a\x56\xdd\x55\x26\xb2\x12\x19\xb3\x4b\x97\xd3\x65\x2c\xac\xd1\x40\x6e\x36\xd7\x21\x44\x8f\x3a\x21\x0c\x28\xb9\x89\x84\xa6\xce\xd6\xde\x9b\xf3\x4e\xb4\x19\x5d\x70\x49\x58\x0b\xf1\x4b\xb8\xfd\x6e\x84\x94\x7b\x32\x63\xde\x07\x3a\x81\xa5\x53\x06\xcb\xde\xad\x3b\x01\xeb\xc6\x2f\x3c\x1f\x5d\xaa\x27\x76\x58\xef\x55\xe7\x29\xe1\xf9\x9f\xcf\xd9\xcb\x17\xff\x28\x7f\x7d\x72\xfe\xeb\x46\xf2\x77\x00\x00\x00\xff\xff\xfe\xca\x70\x28\x92\x09\x00\x00")

func init() {
	if CTX.Err() != nil {
		log.Fatal(CTX.Err())
	}

	var err error

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileLayoutTmpl)
	r, err = gzip.NewReader(rb)
	if err != nil {
		log.Fatal(err)
	}

	err = r.Close()
	if err != nil {
		log.Fatal(err)
	}

	f, err = FS.OpenFile(CTX, "layout.tmpl", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		log.Fatal(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		log.Fatal(err)
	}

	err = f.Close()
	if err != nil {
		log.Fatal(err)
	}

	rb = bytes.NewReader(FileLoginTmpl)
	r, err = gzip.NewReader(rb)
	if err != nil {
		log.Fatal(err)
	}

	err = r.Close()
	if err != nil {
		log.Fatal(err)
	}

	f, err = FS.OpenFile(CTX, "login.tmpl", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		log.Fatal(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		log.Fatal(err)
	}

	err = f.Close()
	if err != nil {
		log.Fatal(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
